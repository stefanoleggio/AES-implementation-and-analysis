import encryption as e
import utils
import numpy as np

# This function can be used to retrive the A and B matrixes in a linear encryptor.
def get_linear_matrices():
    A = np.zeros((8,8))
    B = np.zeros((8,8))
    K = np.zeros(8)
    u = np.zeros(8)

    for i in range(len(K)):
        K[i] = 1
        A[i] = e.encryption(u,K,"l")
        K[i] = 0
        u[i] = 1
        B[i] = e.encryption(u,K,"l")
        u[i] = 0

    return A.transpose(), B.transpose()

# x = E(K, u) = AK + Bu mod p
def detect_vulnerability():
    p = 11
    
    A, B = get_linear_matrices()

    u = np.array([1,0,0,0,0,0,0,0])
    K = np.array([1,0,0,0,0,0,0,0])

    x = (np.dot(A,K) + np.dot(B,u)) % p

    print()
    print("Task 3: identify linear relationship")
    print("x = E(K, u) = AK + Bu mod p")
    print()
    print("Matrix A:\n", A)
    print()
    print("Matrix B:\n", B)
    print()
    print("u:", u)
    print("k:", K)
    print("x:",x)
    print("x_prime: ",e.encryption(u,K,"l"))
    print("x == x_prime => linear relationship proof")
    print()

def linear_KPA(x, u):
    p = 11
    A, B = get_linear_matrices()
    A_inv = utils.matrix_inverse(A,p)
    K = np.around(np.dot(A_inv, (x - np.dot(B,u))))%p
    return K

if __name__ == "__main__":
    detect_vulnerability()
    U, X = utils.read_file("KPAdataAerosmith/KPApairsAerosmith_linear.txt")
    print("Task 4: linear cryptanalysis KPA")
    print()
    K = []
    for u,x in zip(U,X):
        print("u:", u)
        print("x:",x)
        K = linear_KPA(x, u)
        print("k:",K)
        print()
    print("All couples have the same key which is: ")
    print(K)